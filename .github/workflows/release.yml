name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

jobs:
  build:
    uses: ./.github/workflows/build.yml
    with:
      platform: all
      version: ${{ github.event.inputs.version || github.ref_name }}
    secrets: inherit

  release:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Get package info
      id: package
      shell: bash
      run: |
        echo "name=screenshot-cli" >> $GITHUB_OUTPUT
        echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        merge-multiple: true

    - name: List downloaded files
      shell: bash
      run: |
        echo "üìÅ Contents of dist/ directory:"
        ls -la dist/ || echo "dist/ directory is empty or doesn't exist"
        echo "üìÅ Recursive contents of dist/ directory:"
        find dist/ -type f -exec ls -la {} \; 2>/dev/null || echo "No files found in dist/"
        echo "üìÅ Contents of current directory:"
        ls -la

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}
        files: |
          dist/sshot-*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: release
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    if: always()
    
    steps:
    - name: Determine version for notification
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Get package info for notification
      id: package
      shell: bash
      run: |
        echo "name=screenshot-cli" >> $GITHUB_OUTPUT
        echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Send Apprise Notification
      if: needs.release.result == 'success'
      shell: bash
      run: |
        curl -X POST \
        -F "tag=pro" \
        -F "body=‚úÖ Release Success Notification #release ##sshot

        üíæ Release Information
        ‚Ä¢ Repository: ${{ github.repository }}
        ‚Ä¢ Tag: ${{ github.ref }}
        ‚Ä¢ Project: ${{ steps.package.outputs.name }}
        ‚Ä¢ Version: ${{ steps.package.outputs.version }}${COMMIT_INFO}

        üì¶ Build Information
        ‚Ä¢ Platforms: Linux/Windows/macOS (amd64/arm64)
        ‚Ä¢ Build Time: $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')

        ‚è∞ Release Time
        ‚Ä¢ $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')

        üìé Related Links
        ‚Ä¢ [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }})
        ‚Ä¢ [Download Binaries](https://github.com/${{ github.repository }}/releases/latest)" \
        "${{ secrets.APPRISE_HTTP_URL }}"
        
    - name: Notify on failure
      if: needs.release.result == 'failure'
      shell: bash
      run: |
        echo "‚ùå Release failed!"
        exit 1 